# Predicates available: at(entity, location_name)
#                       answer(question_entity)
#                       count(entities)
#                         Note that count is treated specially by the grounder; it'll take the expression
#                         for `entities` and count the number of satisfying groundings.
#                       female(entity)
#                       is_a(entity, string)
#                       location(entity)
#                       name(entity, name_str)
#                       male(entity)
#                       person(entity)
#                       sequence(command_predicate, command_predicate, [...])
#                           A special predicate that the system will evaluate by running the constituents
#                           in order.

#           Preposition predicates:
#                       above(entity, reference)
#                       below(entity, reference)
#                       left_of(entity, reference)
#                       on_top_of(entity, reference)
#                       right_of(entity, reference)
#           Superlatives:
#                       biggest(entity, [int: in_top_k])
#                       smallest(entity, [int: in_top_k])
#                       heaviest(entity, [int: in_top_k])
#                       lightest(entity, [int: in_top_k])
#                       thinnest(entity, [int: in_top_k])
#
# Commands: bring(object_entity[, person_entity)
#           find(entity)
#           follow(person_entity)
#           go(location_entity)
#           guide(person_entity, location_entity)
#           put(object_entity, location_entity)
#           say(string[, person_entity])

##################
# Find objects ($fndobj)
##################

$vbfind the $object in the {room} = (find (λ$1:e (is_a $1 $object) (at $1 {room})))
$vbfind the {kobject?} in the {room} = (find (λ$1:e (is_a $1 {kobject?}) (at $1 {room})))
Tell me how many $object there are on the {placement} = (say (count (λ$1:e (is_a $1 $object) (at $1 {placement}))))

$vbfind (someone | a person) in the {room} and $vbspeak {whattosay} = (say {whattosay} (λ$1:e (person $1) (at $1 {room})))
$vbfind (someone | a person) in the {room} and answer a {question} = (say (answer {question}) (λ$1:e (person $1) (at $1 {room})))
$vbfind {name} in the {room} and $vbspeak {whattosay} = (say {whattosay} (λ$1:e (person $1) (name $1 {name}) (at $1 {room})))
$vbfind {name} in the {room} and answer a {question} = (say (answer {question}) (λ$1:e (person $1) (name $1 {name}) (at $1 {room})))
$vbspeak {whattosay} to {name} at the {beacon 1} = (say {whattosay} (λ$1:e (person $1) (name $1 {name}) (at $1 {beacon 1})))
$vbgopl to the {room 1}, $vbfind (someone | a person), and answer a {question} = (say (answer {question}) (λ$1:e (person $1) (at $1 {room 1})))
$vbgopl to the {room 1}, $vbfind (someone | a person), and $vbspeak {whattosay} = (say {whattosay} (λ$1:e (person $1) (at $1 {room 1})))
$vbgopl to the {room 1}, $vbfind {name}, and $vbspeak {whattosay} = (say {whattosay} (λ$1:e (person $1) (name $1 {name}) (at $1 {room 1})))
$vbgopl to the {room 1}, $vbfind {name}, and answer a {question} = (say (answer {question}) (λ$1:e (person $1) (name $1 {name}) (at $1 {room 1})))

##############################
# Find people ($fndppl)
##############################

Tell me the name of the person at the {beacon} = (say (λ$1:e (λ$2:e (person $2) (name $2 $1) (at $2 {beacon}))))
Tell me the name of the person in the {room} = (say (λ$1:e (λ$2:e (person $2) (name $2 $1) (at $2 {room}))))
answer a {question} to {name} at the {beacon 1} = (say (answer {question}) (λ$1:e (person $1) (name $1 {name}) (at $1 {beacon 1})))

##############################
# Manipulation ($deliver)
##############################
$vbbring me the $object = (bring (λ$1:e (is_a $1 $object)))
$vbbring me the {kobject} from the {placement} = (bring (λ$1:e (is_a $1 {kobject}) (at $1 {placement})))
$vbbring to {name} at the {beacon 1} the $object from the {placement} = (bring (λ$1:e (is_a $1 $object) (at $1 {placement})) (λ$1:e (person $1) (name $1 {name}) (at $1 {beacon 1})))
$vbdeliver the $object to me = (bring (λ$1:e (is_a $1 $object)))
$vbdeliver the $object to {name} at the {beacon 1} = (bring (λ$1:e (is_a $1 $object)) (λ$1:e (person $1) (name $1 {name}) (at $1 {beacon 1})))
$vbgopl to the {placement 1}, $vbfind the $object, and $delivme = (bring (λ$1:e (is_a $1 $object) (at $1 {placement 1})))
$vbgopl to the {placement 1}, $vbfind the $object, and $vbdeliver it to {name} at the {beacon} = (bring (λ$1:e (is_a $1 $object) (at $1 {placement 1})) (λ$1:e (person $1) (name $1 {name}) (at $1 {beacon})))
$vbgopl to the {placement 1}, $vbfind the $object, and $vbplace it on the {placement 2} = (put (λ$1:e (is_a $1 $object) (at $1 {placement 1})) {placement 2})
$vbplace the $object on the {placement 2} = (put (λ$1:e (is_a $1 $object)) {placement 2})
$vbtake the $object and $vbplace it on the {placement 2} = (put (λ$1:e (is_a $1 $object)) {placement 2})
$vbtake the $object from the {placement 1} and $delivme = (bring (λ$1:e (is_a $1 $object) (at $1 {placement 1})))
$vbtake the $object from the {placement 1} and $vbdeliver it to {name} at the {beacon} = (bring (λ$1:e (is_a $1 $object) (at $1 {placement 1})) (λ$1:e (person $1) (at $1 {beacon})(name $1 {name})))
$vbtake the $object from the {placement 1} and $vbplace it on the {placement 2} = (put (λ$1:e (is_a $1 $object) (at $1 {placement 1})) {placement 2})